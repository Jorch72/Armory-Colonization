// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            name = "m2"
            url = "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
        classpath 'com.selesse:gradle-git-changelog:0.4.0-SNAPSHOT'
    }
}

plugins {
    id "com.matthewprenger.cursegradle" version "1.0.7"
}

repositories {
    mavenLocal()
    maven {
        name 'ForgeFS'
        url 'http://files.minecraftforge.net/maven'
    }
    maven {
        name 'DVS1 Maven FS'
        url 'http://dvs1.progwml6.com/files/maven'
    }
    maven {
        name = "SmithsCore"
        url = "http://mavenrepo.smithscore.orionminecraft.com/"
    }
    maven {
        name = "Armory"
        url = "http://mavenrepo.armory.orionminecraft.com/"
    }
    flatDir {
        name = "Local"
        dirs 'libs'
    }
}

apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'
apply plugin: 'com.selesse.git.changelog'

sourceCompatibility = 1.8
targetCompatibility = 1.8

//Buildscript: armory-colonization-colonization
// Load the properties of this project.
ext.configFile = file "build.properties"

//Reference the properties inside the project:
configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

//Date formatting helper function
def getDate() {
    def date = new Date()
    def formattedDate = date.format('dd-MM-yyyy : hh:mm:ss')
    return formattedDate
}

def build_mode = config.build_mode

//These configurations are needed for uploading to a MavenRepo:
configurations {
    deployerJars
}

//Initializing the mod environment
version = config.minecraft_version + "-" + config.mod_version.toString() + "-" + System.getenv().TRAVIS_BUILD_NUMBER.toString()

if(System.getenv().TRAVIS_BRANCH.toString().contains("Development"))
{
    version = version + "-SNAPSHOT"
    apiversion = apiversion + "-SNAPSHOT"
}

group = "com.smithsmodding.armory-colonization"
archivesBaseName = "armory-colonization"

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    runDir = "run"

    mappings = "snapshot_20160518"

    useDepAts = true

    //Replacing stuff inside the code:
    replace "@VERSION@", project.version
    replace "@MCVERSION@", config.minecraft_version
}

dependencies {
    //Mod dependencies
    deobfCompile ':minecolonies-deobf-1.10.2-0.6.25'
    deobfCompile group: 'com.smithsmodding.smithscore', name: 'smithscore', version: config.minecraft_version + "-" + config.smithscore_version
	deobfCompile group: 'com.smithsmodding.armory', name: 'armory', version: config.minecraft_version + "-" + config.armory_version
    deobfCompile "mezz.jei:jei_" + config.minecraft_version + ":" + config.jei_version

    //Maven uploader
    deployerJars 'org.apache.maven.wagon:wagon-ftp:2.8'

    //NotNull analyzer
    compile group: 'org.jetbrains', name: 'annotations', version: config.jetbrains_annotations_version
}

sourceSets {
    main {
        java {
            srcDir 'src/main'
        }
        resources {
            srcDir 'src/resources'
        }
    }
    api {
        java {
            srcDir 'src/api'
        }
    }
}

// Add API dir to the IDEA module
idea.module.sourceDirs += sourceSets.api.java.srcDirs

//This will process all the resources used during build, and needed for running the project
processResources
        {
            //Replaces stuff in mcmod.info, nothing else
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'

                // replace version and mcversion
                expand 'VERSION': project.version, 'MCVERSION': project.minecraft.version
            }

            //Copy everything else, thats not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
            exclude '**/Thumbs.db'
        }

jar {
    manifest {
        attributes 'FMLAT': 'Armory_at.cfg'
    }

    from sourceSets.main.output
    from sourceSets.api.output
}

javadoc {
    source += sourceSets.api.allSource
}

// add a javadoc jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

artifacts {
    archives javadocJar
}

changelog {
    title = "${project.name} - Changelog"
    outputDirectory = file("$projectDir")
    fileName = "changelog.html"
    formats = ['html', 'markdown']
    commitFormat = '%s (%an)'
    includeLines {
        !it.contains("Merge ") && !it.contains("Sync")
    }

    markdown {
        commitFormat = '* %s (%an)'
    }

    html {
        template = file("$projectDir/sample-html.tpl").text
    }
}

curseforge {
    if (System.getenv().CURSEAPIKEY != null) {
        if (!build_mode.toString().trim().equals("SYNC")) {
            if ((build_mode.toString().trim().equals("DEBUG") && System.getenv().TRAVIS_BRANCH.toString().contains("Development")) || ((build_mode.toString().trim().equals("RELEASE") && !System.getenv().TRAVIS_BRANCH.toString().contains("Development")))) {
                apiKey = System.getenv().CURSEAPIKEY

                project {
                    id = '231229'
                    changelog = file('changelog.html')
                    changelogType = 'html'

                    if (System.getenv().TRAVIS_BRANCH.toString().contains("Development")) {
                        releaseType = "alpha"
                    } else {
                        releaseType = "beta"
                    }

                    relations {
                        requiredLibrary 'smithscore' // SmithScore is required
                    }

                    //TOTO: When API ready add here, as well as DevJar and JavaDocJar.
                }
            } else {
                logger.lifecycle("Cannot run the CurseUpload sequence. Curse upload is only done on the Development-Branch when in Debug mode, or on any other branch in Release mode. Current Branch: " + System.getenv().TRAVIS_BRANCH.toString() + " - Current build mode: " + build_mode.toString())
            }
        } else {
            logger.lifecycle("Cannot run CurseUpload sequence. We are currently synchronising to Computers.")
        }
    } else {
        logger.lifecycle("Cannot run the CurseUpload sequence. No API-Key was available.")
    }
}

//Function to upload completed project to the maven repo.
uploadArchives {
    repositories.mavenDeployer {
        configuration = configurations.deployerJars
        if (System.getenv().TRAVIS_BRANCH.toString().contains("Development")) {
            snapshotRepository(url: "ftp://mavenrepo.armory-colonization.orionminecraft.com") {
                authentication(userName: "mavenrepo.armory-colonization.orionminecraft.com|" + System.getenv().FTPUserName.toString(), password: System.getenv().FTPPassword.toString())
            }
        } else {
            repository(url: "ftp://mavenrepo.armory-colonization.orionminecraft.com") {
                authentication(userName: "mavenrepo.armory-colonization.orionminecraft.com|" + System.getenv().FTPUserName.toString(), password: System.getenv().FTPPassword.toString())
            }
        }

        pom {
            groupId = project.group
            version = project.version
            artifactId = project.archivesBaseName
        }

        pom.project {
            name project.archivesBaseName
            packaging 'jar'
            description 'Armory'
            url 'https://github.com/smithsmodding/armory-colonization'

            scm {
                url 'https://github.com/smithsmodding/smithscore'
                connection 'scm:git:git://github.com/smithsmodding/armory-colonization.git'
                developerConnection 'scm:git:git@github.com/smithsmodding/armory-colonization.git'
            }

            issueManagement {
                system 'github'
                url 'https://github.com/smithsmodding/armory-colonization/issues'
            }

            developers {
                developer {
                    id 'OrionDevelopment'
                    name 'Orion'
                    roles {
                        role 'developer'
                    }
                }
            }
        }

    }
}

task checkOutLocalMinecraftBranch(type: Exec) {
    commandLine "git", "checkout", "-b", "Minecraft-" + config.minecraft_version.toString()
}

task gitSetEmail(type: Exec) {
    commandLine "git", "config", "user.email", "smithsmodding-travis@outlook.com"
}

task gitSetName(type: Exec) {
    commandLine "git", "config", "user.name", "Travic CI For Smithsmodding"
}

task configRemoteGit(type: Exec) {
    commandLine "git", "config", "remote.origin.url", "https://" + System.getenv().GitUsername.toString() + ":" + System.getenv().GitPassword.toString() + "@github.com/SmithsGaming/Armory"
}

task createVersionTag(type: Exec) {
    commandLine "git", "tag", "-a", version, "-m", "'Autobuild by Travis CI. Build on: " + getDate() + ".'"
}

task pushGitChanges(type: Exec) {
    commandLine "git", "push", "origin", "-f", "Minecraft-" + config.minecraft_version.toString(), "--quiet"
}

task pushGitTags(type: Exec) {
    commandLine "git", "push", "--tags", "--quiet"
}

gitSetEmail.mustRunAfter checkOutLocalMinecraftBranch
gitSetName.mustRunAfter gitSetEmail
configRemoteGit.mustRunAfter gitSetName
createVersionTag.mustRunAfter configRemoteGit
pushGitChanges.mustRunAfter createVersionTag
pushGitTags.mustRunAfter pushGitChanges

task createGithubBranches() {
    if ((System.getenv().TRAVIS_BRANCH.toString().contains("Development")) && (build_mode.toString().trim().equals("RELEASE"))) {
        logger.lifecycle("Configuring upload to git.")
        dependsOn checkOutLocalMinecraftBranch, gitSetName, gitSetEmail, configRemoteGit, pushGitChanges
        logger.lifecycle("Configuration complete. Current MC Version: " + config.minecraft_version.toString() + ". Branch name: Minecraft-" + config.minecraft_version.toString() + ".")
    } else if ((System.getenv().TRAVIS_BRANCH.toString().contains("Minecraft")) && (build_mode.toString().trim().equals("RELEASE"))) {
        logger.lifecycle("Configuring version marking on git.")
        dependsOn gitSetName, gitSetEmail, configRemoteGit, createVersionTag, pushGitTags
        logger.lifecycle("Configuration complete. Current MC Version: " + config.minecraft_version.toString() + ". Branch name: Minecraft-" + config.minecraft_version.toString() + ".")
    } else {
        logger.lifecycle("The sync of the branches is not being executed, because we are not releasing a new version.")
    }
}

//The external task that executes the uploadAtchives function.
task('uploadJars', dependsOn: uploadArchives) {
    description = "uploads JARs"
}